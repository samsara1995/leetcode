class Solution {
public:
    int maxProfit(vector<int>& prices) {
        /*
        给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​

        设计一个算法计算出最大利润。在满足以下约束条件下，
        你可以尽可能地完成更多的交易（多次买卖一支股票）:

        你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
        卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。

        输入: [1,2,3,0,2]
        输出: 3 
        解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]

        解法：动态规划

        dp[i][j] 表示 [0, i] 区间内，在下标为 i 这一天状态为 j 时的最大收益。

        这里 j 取三个值：

        0 表示不持股；
        1 表示持股；
        2 表示处在冷冻期。

        第二步：状态转移方程

        不持股可以由这两个状态转换而来：
        昨天不持股，今天什么都不操作，仍然不持股；
        昨天持股，今天卖了一股。
        dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i]);

        持股可以由这两个状态转换而来：
        昨天持股，今天什么都不操作，仍然持股；
        昨天处在冷冻期，今天买了一股；
        dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][2] - prices[i]);

        处在冷冻期只可以由不持股转换而来，因为题目中说，刚刚把股票卖了，需要冷冻 1 天。
        dp[i][2] = dp[i - 1][0];
        */
        
        int len =prices.size();
        if(len<2) return 0;
        vector<vector<int>> dp(len+1,vector<int> (4,0));
        //ector<vector<int>> adjMat(500, vector<int>(0));
        int res=0;
  
        dp[0][0]=0;
        dp[0][1]=-prices[0];
        dp[0][2]=0;
        for (int i =1;i<len;i++)
        {
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][2] - prices[i]);
            dp[i][2] = dp[i - 1][0];
        }
        return max(dp[len-1][0],dp[len-1][2]);
        
    }
};
